[
    {
      "title": "array_initialization",
      "sub_category": "Array basics",
      "code": "/* Code to initialize an array */\nint numbers[] = {1, 2, 3, 4, 5};\nint size = sizeof(numbers) / sizeof(numbers[0]);\n\n/* Alternative initialization */\nint scores[5];\nfor (int i = 0; i < 5; i++) {\n    scores[i] = i * 10;\n}",
      "mermaid": "flowchart TD\n    A[Start] --> B[Initialize numbers array]\n    B --> C[Calculate size]\n    C --> D[Initialize scores array]\n    D --> E[End]",
      "explanation": "This example demonstrates two common ways to initialize arrays in C: using an initializer list and using a loop to set values.",
      "related_functions": [
        {
          "name": "memset",
          "description": "Fills a block of memory with a particular value"
        },
        {
          "name": "sizeof",
          "description": "Determines the size in bytes of a type or variable"
        }
      ]
    },
    {
      "title": "array_traversal",
      "sub_category": "Array iteration",
      "code": "/* Code to traverse an array */\nint numbers[] = {10, 20, 30, 40, 50};\nint size = sizeof(numbers) / sizeof(numbers[0]);\n\n/* Traversal using index */\nfor (int i = 0; i < size; i++) {\n    printf(\"%d \", numbers[i]);\n}\n\n/* Traversal using pointer */\nint *ptr = numbers;\nwhile (ptr < numbers + size) {\n    printf(\"%d \", *ptr++);\n}",
      "mermaid": "flowchart TD\n    A[Start] --> B[Initialize array]\n    B --> C[Traverse using index]\n    C --> D[Traverse using pointer]\n    D --> E[End]",
      "explanation": "This example shows two methods to traverse an array: using array indexing and using pointer arithmetic.",
      "related_functions": [
        {
          "name": "printf",
          "description": "Prints formatted output to stdout"
        },
        {
          "name": "sizeof",
          "description": "Determines the size in bytes of a type or variable"
        }
      ]
    },
    {
      "title": "array_searching",
      "sub_category": "Array iteration",
      "code": "/* Code to search for an element in an array */\nint numbers[] = {10, 20, 30, 40, 50};\nint size = sizeof(numbers) / sizeof(numbers[0]);\nint target = 30;\nint index = -1;\n\nfor (int i = 0; i < size; i++) {\n    if (numbers[i] == target) {\n        index = i;\n        break;\n    }\n}\n\n/* index will be 2 if found, -1 if not found */",
      "mermaid": "flowchart TD\n    A[Start] --> B[Initialize variables]\n    B --> C{Element found?}\n    C -- Yes --> D[Set index]\n    C -- No --> E[Move to next element]\n    E --> C\n    D --> F[End]\n    C -- End of array --> F",
      "explanation": "This code demonstrates a linear search to find a specific element in an array. It iterates through the array and stops when the target is found or the end is reached.",
      "related_functions": [
        {
          "name": "bsearch",
          "description": "Performs a binary search on a sorted array"
        },
        {
          "name": "memchr",
          "description": "Searches an array for a specific byte"
        }
      ]
    },
    {
      "title": "array_sorting",
      "sub_category": "Array manipulation",
      "code": "/* Code to sort an array (Bubble Sort) */\nvoid bubble_sort(int arr[], int n) {\n    for (int i = 0; i < n-1; i++) {\n        for (int j = 0; j < n-i-1; j++) {\n            if (arr[j] > arr[j+1]) {\n                /* Swap elements */\n                int temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n}\n\nint numbers[] = {64, 34, 25, 12, 22, 11, 90};\nint size = sizeof(numbers) / sizeof(numbers[0]);\nbubble_sort(numbers, size);",
      "mermaid": "flowchart TD\n    A[Start] --> B[Initialize array]\n    B --> C[Outer loop]\n    C --> D[Inner loop]\n    D --> E{Need swap?}\n    E -- Yes --> F[Swap elements]\n    E -- No --> G[Next inner iteration]\n    F --> G\n    G --> D\n    D -- Inner loop done --> H[Next outer iteration]\n    H --> C\n    C -- Outer loop done --> I[End]",
      "explanation": "This example implements the Bubble Sort algorithm to sort an array in ascending order. It repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order.",
      "related_functions": [
        {
          "name": "qsort",
          "description": "Sorts an array using the quicksort algorithm"
        },
        {
          "name": "memcpy",
          "description": "Copies memory area"
        }
      ]
    },
    {
      "title": "array_reversal",
      "sub_category": "Array manipulation",
      "code": "/* Code to reverse an array in-place */\nvoid reverse_array(int arr[], int start, int end) {\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint numbers[] = {1, 2, 3, 4, 5};\nint size = sizeof(numbers) / sizeof(numbers[0]);\nreverse_array(numbers, 0, size - 1);",
      "mermaid": "flowchart TD\n    A[Start] --> B[Initialize array]\n    B --> C{start < end?}\n    C -- Yes --> D[Swap elements]\n    D --> E[Move pointers]\n    E --> C\n    C -- No --> F[End]",
      "explanation": "This function reverses the order of elements in an array in-place. It uses two pointers, one starting from the beginning and one from the end, swapping elements as it moves towards the center of the array.",
      "related_functions": [
        {
          "name": "memcpy",
          "description": "Copies memory area"
        },
        {
          "name": "memmove",
          "description": "Moves one memory area to another"
        }
      ]
    },
    {
      "title": "array_rotation",
      "sub_category": "Array manipulation",
      "code": "/* Code to rotate an array left by k positions */\nvoid rotate_left(int arr[], int n, int k) {\n    k = k % n;  /* Handle cases where k > n */\n    int temp[k];\n    \n    /* Store first k elements */\n    for (int i = 0; i < k; i++) {\n        temp[i] = arr[i];\n    }\n    \n    /* Shift rest of the array */\n    for (int i = k; i < n; i++) {\n        arr[i-k] = arr[i];\n    }\n    \n    /* Place temp elements at the end */\n    for (int i = 0; i < k; i++) {\n        arr[n-k+i] = temp[i];\n    }\n}\n\nint numbers[] = {1, 2, 3, 4, 5};\nint size = sizeof(numbers) / sizeof(numbers[0]);\nrotate_left(numbers, size, 2);",
      "mermaid": "flowchart TD\n    A[Start] --> B[Initialize array]\n    B --> C[Store first k elements]\n    C --> D[Shift rest of array]\n    D --> E[Place temp elements at end]\n    E --> F[End]",
      "explanation": "This code rotates an array to the left by a specified number of positions. It first stores the elements to be rotated, then shifts the remaining elements, and finally places the stored elements at the end.",
      "related_functions": [
        {
          "name": "memcpy",
          "description": "Copies memory area"
        },
        {
          "name": "memmove",
          "description": "Moves one memory area to another"
        }
      ]
    },
    {
      "title": "array_merging",
      "sub_category": "Array manipulation",
      "code": "/* Code to merge two sorted arrays */\nvoid merge_arrays(int arr1[], int n1, int arr2[], int n2, int result[]) {\n    int i = 0, j = 0, k = 0;\n    \n    while (i < n1 && j < n2) {\n        if (arr1[i] <= arr2[j]) {\n            result[k++] = arr1[i++];\n        } else {\n            result[k++] = arr2[j++];\n        }\n    }\n    \n    /* Copy remaining elements */\n    while (i < n1) {\n        result[k++] = arr1[i++];\n    }\n    while (j < n2) {\n        result[k++] = arr2[j++];\n    }\n}\n\nint arr1[] = {1, 3, 5, 7};\nint arr2[] = {2, 4, 6, 8};\nint n1 = sizeof(arr1) / sizeof(arr1[0]);\nint n2 = sizeof(arr2) / sizeof(arr2[0]);\nint result[n1 + n2];\nmerge_arrays(arr1, n1, arr2, n2, result);",
      "mermaid": "flowchart TD\n    A[Start] --> B[Initialize arrays]\n    B --> C{Elements left in both?}\n    C -- Yes --> D{arr1[i] <= arr2[j]?}\n    D -- Yes --> E[Add from arr1]\n    D -- No --> F[Add from arr2]\n    E --> C\n    F --> C\n    C -- No --> G[Copy remaining elements]\n    G --> H[End]",
      "explanation": "This code merges two sorted arrays into a single sorted array. It compares elements from both arrays and adds them to the result array in the correct order.",
      "related_functions": [
        {
          "name": "memcpy",
          "description": "Copies memory area"
        },
        {
          "name": "qsort",
          "description": "Sorts an array using the quicksort algorithm"
        }
      ]
    },
    {
      "title": "array_2d_operations",
      "sub_category": "Multi-dimensional arrays",
      "code": "/* Code for 2D array operations */\n#define ROWS 3\n#define COLS 3\n\nint matrix[ROWS][COLS] = {\n    {1, 2, 3},\n    {4, 5, 6},\n    {7, 8, 9}\n};\n\n/* Traverse 2D array */\nfor (int i = 0; i < ROWS; i++) {\n    for (int j = 0; j < COLS; j++) {\n        printf(\"%d \", matrix[i][j]);\n    }\n    printf(\"\\n\");\n}\n\n/* Find sum of all elements */\nint sum = 0;\nfor (int i = 0; i < ROWS; i++) {\n    for (int j = 0; j < COLS; j++) {\n        sum += matrix[i][j];\n    }\n}\n",
      "mermaid": "flowchart TD\n    A[Start] --> B[Initialize 2D array]\n    B --> C[Traverse array]\n    C --> D[Calculate sum]\n    D --> E[End]",
      "explanation": "This example demonstrates operations on a 2D array, including initialization, traversal, and element summation. It shows how to access and manipulate elements in a multi-dimensional array.",
      "related_functions": [
        {
          "name": "printf",
          "description": "Prints formatted output to stdout"
        },
        {
          "name": "malloc",
          "description": "Allocates memory dynamically"
        }
      ]
    },
    {
      "title": "array_dynamic_allocation",
      "sub_category": "Dynamic memory management",
      "code": "/* Code for dynamic array allocation */\n#include <stdlib.h>\n\nint size = 5;\nint *dynamic_array = (int *)malloc(size * sizeof(int));\n\nif (dynamic_array == NULL) {\n    printf(\"Memory allocation failed\\n\");\n    return 1;\n}\n\n/* Initialize array */\nfor (int i = 0; i < size; i++) {\n    dynamic_array[i] = i * 10;\n}\n\n/* Resize array */\nsize = 10;\ndynamic_array = (int *)realloc(dynamic_array, size * sizeof(int));\n\nif (dynamic_array == NULL) {\n    printf(\"Memory reallocation failed\\n\");\n    return 1;\n}\n\n/* Don't forget to free the memory when done */\nfree(dynamic_array);",
      "mermaid": "flowchart TD\n    A[Start] --> B[Allocate memory]\n    B --> C{Allocation successful?}\n    C -- Yes --> D[Initialize array]\n    C -- No --> E[Print error]\n    D --> F[Resize array]\n    F --> G{Reallocation successful?}\n    G -- Yes --> H[Use resized array]\n    G -- No --> I[Print error]\n    H --> J[Free memory]\n    J --> K[End]\n    E --> K\n    I --> K",
      "explanation": "This example shows how to dynamically allocate memory for an array, resize it, and properly free the memory. It demonstrates the use of malloc() for initial allocation, realloc() for resizing, and free() for deallocating memory.",
      "related_functions": [
        {
          "name": "malloc",
          "description": "Allocates memory dynamically"
        },
        {
          "name": "realloc",
          "description": "Reallocates memory"
        },
        {
          "name": "free",
          "description": "Frees dynamically allocated memory"
        }
      ]
    }
  ]