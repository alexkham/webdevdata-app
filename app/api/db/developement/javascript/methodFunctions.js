export const methodFunctions = {
    'concat': (array, ...args) => array.concat(...args),
    'copyWithin': (array, target, start, end) => [...array].copyWithin(target, start, end),
    'entries': (array) => [...array.entries()],
    'every': (array, callback) => [array.every(eval(callback))], // Using eval for simplicity
    'fill': (array, value, start, end) => [...array].fill(value, start, end),
    'filter': (array, callback) => array.filter(eval(callback)),
    'find': (array, callback) => [array.find(eval(callback))],
    'findIndex': (array, callback) => [array.findIndex(eval(callback))],
    'flat': (array, depth) => array.flat(depth),
    'flatMap': (array, callback) => array.flatMap(eval(callback)),
    'forEach': (array, callback) => { array.forEach(eval(callback)); return array; },
    'includes': (array, value) => [array.includes(value)],
    'indexOf': (array, value) => [array.indexOf(value)],
    'join': (array, separator) => [array.join(separator)],
    'keys': (array) => [...array.keys()],
    'lastIndexOf': (array, value) => [array.lastIndexOf(value)],
    'map': (array, callback) => array.map(eval(callback)),
    'pop': (array) => [...array.slice(0, -1)],
    'push': (array, element) => [...array, element],
    'reduce': (array, callback, initialValue) => [array.reduce(eval(callback), initialValue)],
    'reduceRight': (array, callback, initialValue) => [array.reduceRight(eval(callback), initialValue)],
    'reverse': (array) => [...array].reverse(),
    'shift': (array) => [...array.slice(1)],
    'slice': (array, start, end) => array.slice(start, end),
    'some': (array, callback) => [array.some(eval(callback))],
    'sort': (array, compareFunction) => [...array].sort(eval(compareFunction)),
    'splice': (array, start, deleteCount, ...items) => [...array].splice(start, deleteCount, ...items),
    'toLocaleString': (array) => [array.toLocaleString()],
    'toString': (array) => [array.toString()],
    'unshift': (array, element) => [element, ...array],
    'at': (array, index) => [array.at(index)],
    'values': (array) => [...array.values()],
    'length': (array) => [array.length]}
    // // The following methods are not typical for manipulation in this context
    // 'constructor': () => [], 'isArray': () => [], 'from': () => [], 'of': () => [], 'toStringTag':
